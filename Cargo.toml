[workspace]
resolver = "2"
members = [
  "examples/custom-binary",
  "trailbase-cli",
  "trailbase-core",
  "trailbase-extension",
  "trailbase-sqlite",
  "vendor/sqlean",
]
default-members = [
  "trailbase-cli",
  "trailbase-core",
  "trailbase-extension",
  "trailbase-sqlite",
]
exclude = [
  "vendor/refinery",
]

# https://doc.rust-lang.org/cargo/reference/profiles.html
[profile.release.'cfg(not(windows))']
panic = "unwind"
opt-level = 3
# PGO doesn't work with LTO: https://github.com/llvm/llvm-project/issues/57501
# lto = "off"
lto = true
codegen-units = 1

[profile.release.'cfg(windows)']
panic = "unwind"
opt-level = 3
lto = true
codegen-units = 16

# Workaround for https://github.com/gwenn/lemon-rs/issues/78. sqlite3-parser
# requires 1+MB stack frames to parse trivial SQL statements, which is larger
# than Window's default stack size of 1MB. This is due to the rust compiler not
# overlapping stack variables of disjoint branches in dev mode and instead
# allocating them all.
[profile.dev.package.sqlite3-parser]
opt-level = 1

[workspace.dependencies]
refinery = { package = "refinery", path = "vendor/refinery/refinery", default-features = false, features = ["rusqlite"] }
refinery-core = { package = "refinery-core", path = "vendor/refinery/refinery_core" }
rusqlite = { version = "^0.32.1", default-features = false, features = [
    "bundled",
    "column_decltype",
    "load_extension",
    "modern_sqlite",
    "functions",
    "limits",
    "backup",
    "hooks",
] }
