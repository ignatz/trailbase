package trailbase:runtime;

interface init-endpoint  {
  enum method-type {
    get,
    post,
    head,
    options,
    patch,
    delete,
    put,
    trace,
    connect,
  }

  record init-result {
    /// Registered http handlers (method, path)[].
    http-handlers: list<tuple<method-type, string>>,

    /// Registered jobs (name, spec)[].
    job-handlers: list<tuple<string, string>>,
  }

  init: func() -> init-result;
}

interface host-endpoint {
  thread-id: func() -> u64;
}

// Note:
//  * imports are provided by the host
//  * exports are provided by the guest
//  * includes to include a world into another world.
world trailbase {
  // use init-endpoint.{method-type, init-result};

  // Pull in WASIp2 http interface for outbound requests.
  import wasi:http/outgoing-handler@0.2.3;

  // Pull in WASIp2 filesystem interfaces
  include wasi:filesystem/imports@0.2.3;

  // Pull in WASI random interfaces
  include wasi:random/imports@0.2.3;

  // Host-provided interfaces
  import host-endpoint;

  // Guest-provided interfaces.
  export init-endpoint;

  // Note: the rust guest meddles with bindgen and exports their own handler
  // (both spin and wstd).
  export wasi:http/incoming-handler@0.2.3;
}
